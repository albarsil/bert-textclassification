#!/usr/bin/env python3 

# This file implements the scoring service shell. You don't necessarily need to modify it for various
# algorithms. It starts nginx and gunicorn with the correct configurations and then simply waits until
# gunicorn exits.
#
# The flask server is specified to be the app object in wsgi.py
#
# We set the following parameters:
#
# Parameter                Environment Variable              Default Value
# ---------                --------------------              -------------
# number of workers        MODEL_SERVER_WORKERS              the number of CPU cores
# timeout                  MODEL_SERVER_TIMEOUT              60 seconds

import logging
import multiprocessing
import os
import signal
import subprocess
import sys

logging.basicConfig(level=logging.DEBUG, format='[%(asctime)s] {%(filename)s:%(lineno)d} %(levelname)s - %(message)s')
logger = logging.getLogger()

# https://medium.com/building-the-system/gunicorn-3-means-of-concurrency-efbb547674b7
threads = multiprocessing.cpu_count()
workers = min(5, threads) # Suggested (2*threads)+1. But we have a limitation of 4Gi of memory and each worker takes about 400Mi to run

model_server_timeout = os.environ.get('MODEL_SERVER_TIMEOUT', 30)
model_server_workers = int(os.environ.get('MODEL_SERVER_WORKERS', workers))

def sigterm_handler(nginx_pid, gunicorn_pid):
    try:
        logger.info("Inference server exiting; nginx pid: {} with signal: {}".format(nginx_pid, str(signal.SIGQUIT)))
        os.kill(nginx_pid, signal.SIGQUIT)
    except OSError as e:
        logger.info("Error when terminating nginx: {}".format(e))
        pass
    try:
        logger.info("Inference server exiting; gunicorn pid: {} with signal: {}".format(gunicorn_pid, str(signal.SIGTERM)))
        os.kill(gunicorn_pid, signal.SIGTERM)
    except OSError as e:
        logger.info("Error when terminating gunicorn: {}".format(e))
        pass

    logger.info("Exiting")
    sys.exit(0)

def start_server():
    logger.info('Starting the inference server with {} workers. Estimated threads: {}'.format(model_server_workers, threads))

    # link the log streams to stdout/err so they will be logged to the container logs
    subprocess.check_call(['ln', '-sf', '/dev/stdout', '/var/log/nginx/access.log'])
    subprocess.check_call(['ln', '-sf', '/dev/stderr', '/var/log/nginx/error.log'])

    nginx = subprocess.Popen(['nginx', '-c', '/opt/ml/nginx.conf'])
    gunicorn = subprocess.Popen(['gunicorn',
                                 '--timeout', str(model_server_timeout),
                                 '-k', 'sync',
                                 '-b', 'unix:/tmp/gunicorn.sock',
                                 '-w', str(model_server_workers),
                                 'wsgi:app'])

    signal.signal(signal.SIGTERM, lambda a, b: sigterm_handler(nginx.pid, gunicorn.pid))

    # If either subprocess exits, so do we.
    pids = set([nginx.pid, gunicorn.pid])
    while True:
        pid, _ = os.wait()
        if pid in pids:
            break

    sigterm_handler(nginx.pid, gunicorn.pid)

# The main routine just invokes the start function.

if __name__ == '__main__':
    start_server()
